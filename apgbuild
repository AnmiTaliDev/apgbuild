#!/usr/bin/env python3

import os
import sys
import json
import tarfile
import argparse
import shutil
from pathlib import Path
from datetime import datetime
from typing import Dict, Any
import colorama
from colorama import Fore, Back, Style

# Initialize colorama for cross-platform colored output
colorama.init(autoreset=True)

VERSION = "1.0.0"
BANNER = f"""
{Fore.CYAN}╔══════════════════════════════════════════╗
║             {Fore.GREEN}APG Builder {VERSION}{Fore.CYAN}             ║
║      {Fore.WHITE}Create and validate APG packages{Fore.CYAN}      ║
╚══════════════════════════════════════════╝{Style.RESET_ALL}
"""

class Colors:
    """Color constants for formatted output"""
    INFO = Fore.BLUE
    SUCCESS = Fore.GREEN
    WARNING = Fore.YELLOW
    ERROR = Fore.RED
    HEADER = Fore.CYAN
    BOLD = Style.BRIGHT
    DIM = Style.DIM
    RESET = Style.RESET_ALL

class APGBuilder:
    REQUIRED_STRUCTURE = {
        'metadata.json': {
            'required': True,
            'type': 'file',
            'description': 'Package metadata and information'
        },
        'manifest.json': {
            'required': True,
            'type': 'file',
            'description': 'Package manifest configuration'
        },
        'scripts/preinstall': {
            'required': True,
            'type': 'file',
            'description': 'Pre-installation script'
        },
        'scripts/postinstall': {
            'required': True,
            'type': 'file',
            'description': 'Post-installation script'
        },
        'scripts/preremove': {
            'required': True,
            'type': 'file',
            'description': 'Pre-removal script'
        },
        'scripts/postremove': {
            'required': True,
            'type': 'file',
            'description': 'Post-removal script'
        },
        'data': {
            'required': True,
            'type': 'directory',
            'description': 'Package data directory'
        },
        'checksums.json': {
            'required': True,
            'type': 'file',
            'description': 'File checksums and integrity data'
        }
    }

    def __init__(self, directory: str, output_name: str, verbose: bool = False):
        self.directory = Path(directory).resolve()
        self.output_name = output_name
        self.verbose = verbose
        self.temp_tar = "temp_archive.tar.xz"
        self.start_time = datetime.now()

    def log(self, level: str, message: str):
        """Universal logging method"""
        colors = {
            'INFO': Colors.INFO,
            'SUCCESS': Colors.SUCCESS,
            'WARNING': Colors.WARNING,
            'ERROR': Colors.ERROR
        }
        if level == 'INFO' and not self.verbose:
            return
        timestamp = datetime.now().strftime('%H:%M:%S')
        print(f"{Colors.DIM}[{timestamp}]{Colors.RESET} {colors.get(level)}[{level}]{Colors.RESET} {message}")

    def validate_structure(self) -> bool:
        """Validate the directory structure"""
        self.log('INFO', f"Validating directory structure in: {self.directory}")
        is_valid = True
        missing_items = []
        
        for path, config in self.REQUIRED_STRUCTURE.items():
            full_path = self.directory / path
            if not full_path.exists():
                missing_items.append((path, config['description']))
                is_valid = False
            else:
                if config['type'] == 'file' and not full_path.is_file():
                    self.log('ERROR', f"{path} should be a file")
                    is_valid = False
                elif config['type'] == 'directory' and not full_path.is_dir():
                    self.log('ERROR', f"{path} should be a directory")
                    is_valid = False
                else:
                    self.log('INFO', f"✓ Found {path}")

        if missing_items:
            print(f"\n{Colors.ERROR}Missing required components:{Colors.RESET}")
            for item, desc in missing_items:
                print(f"{Colors.BOLD}  • {item}{Colors.RESET}")
                print(f"    {Colors.DIM}{desc}{Colors.RESET}")

        return is_valid

    def create_archive(self) -> bool:
        """Create the APG archive"""
        try:
            self.log('INFO', f"Creating archive from {self.directory}")
            
            # Create tar.xz archive with progress indicator
            with tarfile.open(self.temp_tar, "w:xz") as tar:
                total_files = sum(len(files) for _, _, files in os.walk(self.directory))
                processed_files = 0
                
                for root, _, files in os.walk(self.directory):
                    for file in files:
                        full_path = Path(root) / file
                        rel_path = full_path.relative_to(self.directory)
                        tar.add(full_path, arcname=str(rel_path))
                        processed_files += 1
                        if self.verbose:
                            progress = (processed_files / total_files) * 100
                            print(f"\rProgress: {progress:.1f}% [{processed_files}/{total_files}]", end='')
                
                if self.verbose:
                    print()  # New line after progress

            # Rename to .apg
            if os.path.exists(self.output_name):
                os.remove(self.output_name)
            os.rename(self.temp_tar, self.output_name)

            package_size = Path(self.output_name).stat().st_size / (1024 * 1024)  # Size in MB
            self.log('SUCCESS', f"Created package: {self.output_name} ({package_size:.2f} MB)")
            return True

        except Exception as e:
            self.log('ERROR', f"Failed to create archive: {str(e)}")
            if os.path.exists(self.temp_tar):
                os.remove(self.temp_tar)
            return False

def show_structure_help():
    """Display help about required package structure"""
    print(f"\n{Colors.HEADER}Required Package Structure:{Colors.RESET}")
    print("""
package.apg/
├── metadata.json      # Package metadata
├── manifest.json      # Package manifest
├── scripts/          
│   ├── preinstall    # Pre-installation script
│   ├── postinstall   # Post-installation script
│   ├── preremove     # Pre-removal script
│   └── postremove    # Post-removal script
├── data/             # Package data directory
└── checksums.json    # File checksums
""")

def main():
    parser = argparse.ArgumentParser(
        description=f"{Colors.HEADER}APG Package Builder{Colors.RESET}\n" +
                   f"{Colors.DIM}Tool for creating and validating APG packages{Colors.RESET}",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('--name', required=True, help='Output APG file name')
    parser.add_argument('--dir', required=True, help='Source directory path')
    parser.add_argument('--verbose', '-v', action='store_true', help='Enable verbose output')
    parser.add_argument('--structure', action='store_true', help='Show required package structure')
    parser.add_argument('--version', action='version', 
                       version=f'%(prog)s {VERSION}',
                       help='Show program version')

    args = parser.parse_args()

    if args.structure:
        show_structure_help()
        sys.exit(0)

    print(BANNER)

    # Validate input
    if not args.name.endswith('.apg'):
        args.name += '.apg'

    if not os.path.isdir(args.dir):
        print(f"{Colors.ERROR}Error: Directory not found: {args.dir}{Colors.RESET}")
        sys.exit(1)

    # Create builder instance
    builder = APGBuilder(args.dir, args.name, args.verbose)

    # Validate structure and create archive
    if builder.validate_structure():
        if builder.create_archive():
            duration = datetime.now() - builder.start_time
            print(f"\n{Colors.SUCCESS}Package built successfully!{Colors.RESET}")
            print(f"{Colors.DIM}Time elapsed: {duration.total_seconds():.2f} seconds{Colors.RESET}")
            sys.exit(0)
    
    sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}Operation cancelled by user{Colors.RESET}")
        sys.exit(1)