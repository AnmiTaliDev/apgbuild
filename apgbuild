#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
APG Builder and Validator
Created: 2024-12-31 11:39:59 UTC
Author: AnmiTaliDev
License: GPL

Utility for building and validating APG packages using PyATA library.
"""

import os
import sys
import json
import shutil
import hashlib
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Union
import click
from pyata import ATAArchive

# Настройка логирования
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger('apgbuild')

class APGError(Exception):
    """Базовый класс для ошибок APG"""
    pass

class APGValidationError(APGError):
    """Ошибки валидации"""
    pass

class APGBuilder:
    """Основной класс для сборки APG пакетов"""
    
    REQUIRED_FILES = {
        "metadata.json": {
            "required": True,
            "validate": True,
            "required_fields": ["name", "version", "release", "architecture"]
        },
        "manifest.json": {
            "required": True,
            "validate": True,
            "required_fields": ["files", "scripts"]
        },
        "scripts/preinstall": {"required": True, "executable": True},
        "scripts/postinstall": {"required": True, "executable": True},
        "scripts/preremove": {"required": True, "executable": True},
        "scripts/postremove": {"required": True, "executable": True},
        "data": {"required": True, "is_dir": True},
        "checksums.json": {"required": True, "validate": True}
    }

    def __init__(self, source_dir: Union[str, Path], output_dir: Optional[Union[str, Path]] = None,
                 compression: str = 'zstd', level: int = 19, verbose: bool = False):
        self.source_dir = Path(source_dir).resolve()
        self.output_dir = Path(output_dir) if output_dir else self.source_dir
        self.compression = compression
        self.level = level
        self.verbose = verbose
        self.metadata = {}

    def _log(self, message: str, level: str = 'info') -> None:
        """Логирование с учетом уровня verbose"""
        if self.verbose or level != 'info':
            getattr(logger, level)(message)

    def _validate_json_file(self, file_path: Path, required_fields: List[str] = None) -> None:
        """Проверка JSON файла и его обязательных полей"""
        try:
            with open(file_path) as f:
                data = json.load(f)
                if required_fields:
                    missing = [field for field in required_fields if field not in data]
                    if missing:
                        raise APGValidationError(
                            f"Отсутствуют обязательные поля в {file_path.name}: {', '.join(missing)}"
                        )
                return data
        except json.JSONDecodeError:
            raise APGValidationError(f"Некорректный JSON файл: {file_path}")
        except FileNotFoundError:
            raise APGValidationError(f"Файл не найден: {file_path}")

    def _validate_structure(self) -> None:
        """Проверка структуры пакета"""
        errors = []
        
        for path, config in self.REQUIRED_FILES.items():
            full_path = self.source_dir / path
            
            # Проверка существования
            if not full_path.exists():
                if config["required"]:
                    errors.append(f"Отсутствует обязательный компонент: {path}")
                continue
                
            # Проверка на директорию
            if config.get("is_dir") and not full_path.is_dir():
                errors.append(f"Должен быть директорией: {path}")
                
            # Проверка на исполняемость
            if config.get("executable") and not os.access(full_path, os.X_OK):
                errors.append(f"Файл должен быть исполняемым: {path}")
                
            # Валидация JSON
            if config.get("validate"):
                try:
                    data = self._validate_json_file(
                        full_path, 
                        config.get("required_fields", [])
                    )
                    if path == "metadata.json":
                        self.metadata = data
                except APGValidationError as e:
                    errors.append(str(e))
                    
        if errors:
            raise APGValidationError("\n".join(errors))

    def _update_checksums(self) -> None:
        """Обновление контрольных сумм"""
        checksums = {}
        
        for root, _, files in os.walk(self.source_dir):
            for file in files:
                if file != "checksums.json":
                    file_path = Path(root) / file
                    rel_path = file_path.relative_to(self.source_dir)
                    
                    with open(file_path, "rb") as f:
                        checksums[str(rel_path)] = {
                            "sha256": hashlib.sha256(f.read()).hexdigest(),
                            "updated": datetime.utcnow().isoformat()
                        }
        
        with open(self.source_dir / "checksums.json", "w") as f:
            json.dump(
                {
                    "checksums": checksums,
                    "updated": datetime.utcnow().isoformat(),
                    "generator": "apgbuild-1.0.0"
                },
                f, 
                indent=2
            )

    def _get_package_name(self) -> str:
        """Формирование имени пакета"""
        return (f"{self.metadata['name']}-{self.metadata['version']}-"
                f"{self.metadata['release']}-{self.metadata['architecture']}")

    def build(self) -> Path:
        """Сборка пакета"""
        try:
            # Проверка структуры
            self._log("Проверка структуры пакета...")
            self._validate_structure()
            
            # Обновление контрольных сумм
            self._log("Обновление контрольных сумм...")
            self._update_checksums()
            
            # Формирование имени пакета
            package_name = self._get_package_name()
            ata_file = self.output_dir / f"{package_name}.ata"
            apg_file = self.output_dir / f"{package_name}.apg"
            
            # Создание архива
            self._log(f"Создание архива {ata_file}...")
            archive = ATAArchive(
                str(ata_file),
                compression=self.compression,
                level=self.level,
                verbose=self.verbose
            )
            
            # Добавление файлов в архив
            archive.create([str(self.source_dir / item) for item in os.listdir(self.source_dir)])
            
            # Переименование в .apg
            self._log(f"Переименование в {apg_file}...")
            ata_file.rename(apg_file)
            
            self._log(f"Пакет успешно собран: {apg_file}")
            return apg_file
            
        except APGValidationError as e:
            self._log(f"Ошибка валидации:\n{e}", "error")
            raise
        except Exception as e:
            self._log(f"Неожиданная ошибка: {e}", "error")
            raise APGError(f"Ошибка сборки: {e}")

@click.command()
@click.argument('source_dir', type=click.Path(exists=True, file_okay=False, dir_okay=True))
@click.option('--output-dir', '-o', type=click.Path(file_okay=False, dir_okay=True),
              help='Директория для сохранения пакета')
@click.option('--compression', '-c', type=click.Choice(['zstd', 'none']),
              default='zstd', help='Метод сжатия')
@click.option('--level', '-l', type=click.IntRange(1, 19),
              default=19, help='Уровень сжатия (1-19)')
@click.option('--verbose', '-v', is_flag=True, help='Подробный вывод')
def main(source_dir: str, output_dir: str, compression: str, level: int, verbose: bool):
    """Утилита для сборки APG пакетов

    SOURCE_DIR - директория с исходными файлами пакета
    """
    try:
        builder = APGBuilder(
            source_dir,
            output_dir,
            compression=compression,
            level=level,
            verbose=verbose
        )
        builder.build()
        
    except (APGError, Exception) as e:
        click.echo(f"Ошибка: {e}", err=True)
        sys.exit(1)

if __name__ == '__main__':
    main()